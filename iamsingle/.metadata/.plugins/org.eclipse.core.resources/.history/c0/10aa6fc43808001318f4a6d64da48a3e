package shaotian.android.iamsingle.test;

import static org.junit.Assert.*;

import java.util.Date;

import junit.framework.TestCase;

import org.junit.Before;
import org.junit.Test;

import shaotian.android.iamsingle.UIShared.MapMarkerManager;
import shaotian.android.iamsingle.UIShared.MapMarkerManager.MapMarkerInvalidStateException;
import shaotian.android.iamsingle.UIShared.MapMarkerManager.TimedMarker;
import shaotian.android.iamsingle.netsdk.model.Location;
import shaotian.android.iamsingle.netsdk.util.LocationList;
import android.util.Log;

import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;

public class TimedMarkerManagerTest  extends TestCase{

	private LocationList loclis;
	
	private class TimedMarkerStub extends TimedMarker	
	{

		public TimedMarkerStub(MapMarkerManager mapMarkerManager, Marker m) {
			mapMarkerManager.super(m);
		}

		@Override
		public boolean timeout() {
			if(super.time==null)
				return false;
			return (new Date().getTime())-time.getTime()>0;
		}
		
	
	
	}
	

	
	
	public void init()
	{
		this.loclis=new LocationList();
		for(int i=0;i<4;i++)
		{
			loclis.lis.add(new Location(i, i, i));
			
		}
	}
	
	
	
	public void testMarkerMgrStatesFail_Test(){
		MapMarkerManager mgn=MapMarkerManager.Instance();
		boolean haserror=false;
		try {
			mgn.finish();
			mgn.start();

		} catch (MapMarkerInvalidStateException e) {
			haserror=true;
		}
		assertTrue(haserror);
		
		
		
		haserror=false;
		try {
			
			mgn.updateMarker(0, null);

		} catch (MapMarkerInvalidStateException e) {
			haserror=true;
		}
		assertTrue(haserror);
		
		haserror=false;
		
			
		try {
			mgn.addMarker(0, null);
		} catch (MapMarkerInvalidStateException e) {
			// TODO Auto-generated catch block
			haserror=true;
		}

		assertTrue(haserror);
		
	}
	
	
	
	
	
	
	
	/*
	 * initialize: put 4 markers into mgr
	 * test: update 2 markers. see iff other  markers still exist
	 */
/*
	public void testExpiredMarkerDeletion() {
		boolean FirstTimeAddMarkerSuccess=true;
		boolean SecondupdateMarkerSuccess=true;
		try{
			init();
			
			
			//add marker list
			MapMarkerManager mgn=MapMarkerManager.Instance();
			assertTrue(mgn.size()==0);
			mgn.start();
			for(int i=0;i<loclis.size();i++)
			{
				shaotian.android.iamsingle.netsdk.model.Location loc=loclis.lis.get(i);
				
			    int uid=loc.userid;
			    Marker m=null;
			    
			    if(!mgn.contains(uid))
				{	
			    	mgn.addMarker(uid, null);
			    	
				}else{FirstTimeAddMarkerSuccess=false;}

			}
			mgn.finish();
			
			assertTrue(FirstTimeAddMarkerSuccess);
			//makesure all markers are updated
			assertTrue(mgn.size()==loclis.size());
			
			//update marker list
			
			loclis.lis.remove(0);
			loclis.lis.remove(1);
			
			mgn.start();
			for(int i=0;i<loclis.size();i++)
			{
				shaotian.android.iamsingle.netsdk.model.Location loc=loclis.lis.get(i);
				
			    int uid=loc.userid;
			    Marker m=null;
			    
			    if(!mgn.contains(uid))
				{	
			    	SecondupdateMarkerSuccess=false;
			    	
				}
			    else
			    {	//only update changed location
			    	LatLng newlatlng=new LatLng(loc.latitude, loc.longtitude);
			    	mgn.updateMarker(uid, newlatlng);
			    	
			    	
			    }
			}
			mgn.finish();
			assertTrue(SecondupdateMarkerSuccess);
			//makesure exipred markers are deleted
			assertTrue(mgn.size()==loclis.size());

		}catch(MapMarkerInvalidStateException e)
		{
		}
	}
*/
}
