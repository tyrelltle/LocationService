

package shaotian.android.iamsingle.async;
import java.util.Observable;
import java.util.Observer;

import shaotian.android.iamsingle.ChatActivity;
import shaotian.android.iamsingle.UIShared.SharedUtil;
import shaotian.android.iamsingle.netsdk.model.Message;
import shaotian.android.iamsingle.socketsdk.MessageListener;
import shaotian.android.iamsingle.socketsdk.MessageManager;
import shaotian.android.iamsingle.socketsdk.TcpProvider;
import shaotian.android.iamsingle.wssdk.LocationCommunicator;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;

import android.R;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.Notification;
import android.app.Notification.Builder;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.app.TaskStackBuilder;
import android.content.Context;
import android.content.Intent;
import android.content.IntentSender;
import android.content.SharedPreferences;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.location.Location;
import android.os.AsyncTask;
import android.os.Binder;
import android.os.Build;
import android.os.Bundle;
import android.os.IBinder;
import android.support.v4.app.NotificationCompat;
import android.util.Log;
import android.widget.Toast;
public class ServiceMessageSystem extends Service implements Observer{

	
    
	private ServiceMessageSystemBinder mBinder=new ServiceMessageSystemBinder();
	private int uid;
	

	
    public class ServiceMessageSystemBinder extends Binder {
    	public ServiceMessageSystem getService() {
            return ServiceMessageSystem.this;
        }
    }
    
 
	
	
	@Override
	public IBinder onBind(Intent arg0) {
	
		return mBinder;
	}
	@Override
    public void onCreate() {
		Toast.makeText(this, "ServiceMessageSystem started",  Toast.LENGTH_LONG);
        
    }
 
    @Override
    public void onDestroy() {
     
    }
     
    @Override
    public void onStart(Intent intent, int startid) {
         
		Toast.makeText(this, "ServiceMessageSystem started",  Toast.LENGTH_LONG);

    }
    
    
    
    public void startListenMsg() throws Exception
    {	//start to run messageListener, update user upon incoming message
    	ApplicationInfo ai;
		ai = this.getPackageManager().getApplicationInfo(this.getPackageName(), PackageManager.GET_META_DATA);
		Bundle bundle = ai.metaData;

		
		uid =this.getSharedPreferences(SharedUtil.SHARED_PREFERENCES, 0).getInt(SharedUtil.SHARED_UID,-1);
		AsyncUpdateLocation task=new AsyncUpdateLocation(this,uid,bundle.getInt("tcpserverport"),	bundle.getString("serverip"));
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB)
			 task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
		else
			 task.execute();	
    	
    }
	@SuppressLint("ShowToast")
	@Override
	public void update(Observable arg0, Object arg1) {
		Message msg=(Message)arg1;
		NotificationCompat.Builder mBuilder =
		        new NotificationCompat.Builder(this)
		        .setSmallIcon(R.drawable.ic_dialog_info)
		        .setContentTitle("My notification")
		        .setContentText("Hello World!");
		// Creates an explicit intent for an Activity in your app
		Intent resultIntent = new Intent(this, ChatActivity.class);

		// The stack builder object will contain an artificial back stack for the
		// started Activity.
		// This ensures that navigating backward from the Activity leads out of
		// your application to the Home screen.
		TaskStackBuilder stackBuilder = TaskStackBuilder.create(this);
		// Adds the back stack for the Intent (but not the Intent itself)
		stackBuilder.addParentStack(ChatActivity.class);
		// Adds the Intent that starts the Activity to the top of the stack
		stackBuilder.addNextIntent(resultIntent);
		PendingIntent resultPendingIntent =
		        stackBuilder.getPendingIntent(
		            0,
		            PendingIntent.FLAG_UPDATE_CURRENT
		        );
		mBuilder.setContentIntent(resultPendingIntent);
		NotificationManager mNotificationManager =
		    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
		// mId allows you to update the notification later on.
		mNotificationManager.notify(0, mBuilder.build());
		
	}
	
	
	
	
	
	private static class AsyncUpdateLocation extends AsyncTask<Void, Void, Void> {
		 //Async classes 
	  
			
	    	Observer observer;
	    	int uid,srvrport;
	    	String srvrip;
	    	public AsyncUpdateLocation(Observer observer, int uid, int srvrport, String srvrip)
	    	{
	    		this.observer=observer;
	    		this.uid=uid;
	    		this.srvrport=srvrport;
	    		this.srvrip=srvrip;
	    	}
	    	
			@Override
			protected Void doInBackground(Void... params) {
				
				
				MessageManager mgr;
				try {
					if((mgr=MessageManager.instance())==null)
						mgr = MessageManager.initialize(uid,new TcpProvider(srvrip, srvrport));
					MessageListener listener=mgr.CreateMessageListener(new TcpProvider(srvrip, srvrport));
					listener.registerToServer(uid);
			    	listener.addObserver(observer);
			    	new Thread(listener).start();
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    	
				
				
				return null;
				
			}      

	        
	  
	}
	
}
